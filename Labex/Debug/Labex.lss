
Labex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d5a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  00000df0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ed  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000926  00000000  00000000  000029e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001155  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f94  00000000  00000000  00004ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
   a:	00 00       	nop
   c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
   e:	00 00       	nop
  10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
  12:	00 00       	nop
  14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
  16:	00 00       	nop
  18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
  1e:	00 00       	nop
  20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
  22:	00 00       	nop
  24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
  26:	00 00       	nop
  28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
  2e:	00 00       	nop
  30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c0       	rjmp	.+164    	; 0xda <__bad_interrupt>
  36:	00 00       	nop
  38:	50 c0       	rjmp	.+160    	; 0xda <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
  3e:	00 00       	nop
  40:	b4 c0       	rjmp	.+360    	; 0x1aa <__vector_16>
  42:	00 00       	nop
  44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
  46:	00 00       	nop
  48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
  4e:	00 00       	nop
  50:	44 c0       	rjmp	.+136    	; 0xda <__bad_interrupt>
  52:	00 00       	nop
  54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
  56:	00 00       	nop
  58:	40 c0       	rjmp	.+128    	; 0xda <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
  5e:	00 00       	nop
  60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
  62:	00 00       	nop
  64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
  66:	00 00       	nop
  68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
  6a:	00 00       	nop
  6c:	36 c0       	rjmp	.+108    	; 0xda <__bad_interrupt>
  6e:	00 00       	nop
  70:	34 c0       	rjmp	.+104    	; 0xda <__bad_interrupt>
  72:	00 00       	nop
  74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
  76:	00 00       	nop
  78:	bd c3       	rjmp	.+1914   	; 0x7f4 <__vector_30>
  7a:	00 00       	nop
  7c:	2e c0       	rjmp	.+92     	; 0xda <__bad_interrupt>
  7e:	00 00       	nop
  80:	2c c0       	rjmp	.+88     	; 0xda <__bad_interrupt>
  82:	00 00       	nop
  84:	2a c0       	rjmp	.+84     	; 0xda <__bad_interrupt>
  86:	00 00       	nop
  88:	28 c0       	rjmp	.+80     	; 0xda <__bad_interrupt>
  8a:	00 00       	nop
  8c:	74 03       	mulsu	r23, r20
  8e:	6d 03       	fmul	r22, r21
  90:	51 03       	mulsu	r21, r17
  92:	58 03       	fmul	r21, r16
  94:	44 03       	mulsu	r20, r20
  96:	35 03       	mulsu	r19, r21
  98:	5f 03       	fmul	r21, r23
  9a:	63 03       	mulsu	r22, r19
  9c:	6a 03       	fmul	r22, r18
  9e:	67 03       	mulsu	r22, r23

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d0 e1       	ldi	r29, 0x10	; 16
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	11 e0       	ldi	r17, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	ea e5       	ldi	r30, 0x5A	; 90
  b4:	fd e0       	ldi	r31, 0x0D	; 13
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x14>
  bc:	07 90       	elpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 30       	cpi	r26, 0x02	; 2
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x10>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a2 e0       	ldi	r26, 0x02	; 2
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a2 31       	cpi	r26, 0x12	; 18
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	fa d1       	rcall	.+1012   	; 0x4cc <main>
  d8:	3e c6       	rjmp	.+3196   	; 0xd56 <_exit>

000000da <__bad_interrupt>:
  da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <bluetooth_init>:

uint8_t bt_receive_byte()
{
	while (!(UCSR1A & (1 << RXC1)));
	return UDR1;
}
  dc:	10 92 98 00 	sts	0x0098, r1
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 99 00 	sts	0x0099, r24
  e6:	88 e9       	ldi	r24, 0x98	; 152
  e8:	80 93 9a 00 	sts	0x009A, r24
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	80 93 9d 00 	sts	0x009D, r24
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <bt_send_byte>:

void bt_send_byte(uint8_t data)
{
	while (!(UCSR1A & (1 << UDRE1)));
  f6:	eb e9       	ldi	r30, 0x9B	; 155
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	95 ff       	sbrs	r25, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <bt_send_byte+0x4>
	UDR1 = data;
 100:	80 93 9c 00 	sts	0x009C, r24
 104:	08 95       	ret

00000106 <servo_init>:


void servo_init()
{
	// Set pin to output
	DDRB |= (1 << PB6);
 106:	be 9a       	sbi	0x17, 6	; 23
	
	// Timer Top
	ICR1 = 20000;
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	9e e4       	ldi	r25, 0x4E	; 78
 10c:	97 bd       	out	0x27, r25	; 39
 10e:	86 bd       	out	0x26, r24	; 38
	
	TCCR1A = (1 << COM1B1);
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	8f bd       	out	0x2f, r24	; 47
	
	// PWM Phase and Frequency Correct, Clk/8
	TCCR1B = (1 << WGM13) | (1 << CS11);
 114:	82 e1       	ldi	r24, 0x12	; 18
 116:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1C = 0x00;
 118:	10 92 7a 00 	sts	0x007A, r1
 11c:	08 95       	ret

0000011e <head_rotate>:
}

uint8_t head_rotate(uint8_t ANGLE)
{
	if(ANGLE <= 180)
 11e:	85 3b       	cpi	r24, 0xB5	; 181
 120:	c8 f4       	brcc	.+50     	; 0x154 <head_rotate+0x36>
			OCR1B = R90_ANGLE + (DEFAULT_ANGLE - R90_ANGLE) * (ANGLE / 90.0);
		}
		else {
			OCR1B = DEFAULT_ANGLE + (L90_ANGLE - DEFAULT_ANGLE) * ((ANGLE - 90) / 90.0);
		}*/
		OCR1B = L90_ANGLE + (R90_ANGLE - L90_ANGLE) * (ANGLE / 180.0);
 122:	68 2f       	mov	r22, r24
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	e2 d4       	rcall	.+2500   	; 0xaf0 <__floatsisf>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	44 e3       	ldi	r20, 0x34	; 52
 132:	53 e4       	ldi	r21, 0x43	; 67
 134:	47 d4       	rcall	.+2190   	; 0x9c4 <__divsf3>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 ec       	ldi	r19, 0xC0	; 192
 13a:	4a ed       	ldi	r20, 0xDA	; 218
 13c:	54 e4       	ldi	r21, 0x44	; 68
 13e:	64 d5       	rcall	.+2760   	; 0xc08 <__mulsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e8       	ldi	r19, 0x80	; 128
 144:	42 e2       	ldi	r20, 0x22	; 34
 146:	54 e4       	ldi	r21, 0x44	; 68
 148:	d9 d3       	rcall	.+1970   	; 0x8fc <__addsf3>
 14a:	a4 d4       	rcall	.+2376   	; 0xa94 <__fixunssfsi>
 14c:	79 bd       	out	0x29, r23	; 41
 14e:	68 bd       	out	0x28, r22	; 40
		return 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
	}
	return 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
}
 156:	08 95       	ret

00000158 <head_look>:

uint8_t head_look(uint8_t DIRECTION)
{
	switch(DIRECTION)
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	59 f0       	breq	.+22     	; 0x172 <head_look+0x1a>
 15c:	85 30       	cpi	r24, 0x05	; 5
 15e:	19 f0       	breq	.+6      	; 0x166 <head_look+0xe>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	99 f4       	brne	.+38     	; 0x18a <head_look+0x32>
 164:	0c c0       	rjmp	.+24     	; 0x17e <head_look+0x26>
			OCR1B = R90_ANGLE + (DEFAULT_ANGLE - R90_ANGLE) * (ANGLE / 90.0);
		}
		else {
			OCR1B = DEFAULT_ANGLE + (L90_ANGLE - DEFAULT_ANGLE) * ((ANGLE - 90) / 90.0);
		}*/
		OCR1B = L90_ANGLE + (R90_ANGLE - L90_ANGLE) * (ANGLE / 180.0);
 166:	80 e6       	ldi	r24, 0x60	; 96
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	99 bd       	out	0x29, r25	; 41
 16c:	88 bd       	out	0x28, r24	; 40
uint8_t head_look(uint8_t DIRECTION)
{
	switch(DIRECTION)
	{
		case LEFT:
		return head_rotate(180);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
			OCR1B = R90_ANGLE + (DEFAULT_ANGLE - R90_ANGLE) * (ANGLE / 90.0);
		}
		else {
			OCR1B = DEFAULT_ANGLE + (L90_ANGLE - DEFAULT_ANGLE) * ((ANGLE - 90) / 90.0);
		}*/
		OCR1B = L90_ANGLE + (R90_ANGLE - L90_ANGLE) * (ANGLE / 180.0);
 172:	8a e8       	ldi	r24, 0x8A	; 138
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	99 bd       	out	0x29, r25	; 41
 178:	88 bd       	out	0x28, r24	; 40
	{
		case LEFT:
		return head_rotate(180);
		
		case RIGHT:
		return head_rotate(0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
			OCR1B = R90_ANGLE + (DEFAULT_ANGLE - R90_ANGLE) * (ANGLE / 90.0);
		}
		else {
			OCR1B = DEFAULT_ANGLE + (L90_ANGLE - DEFAULT_ANGLE) * ((ANGLE - 90) / 90.0);
		}*/
		OCR1B = L90_ANGLE + (R90_ANGLE - L90_ANGLE) * (ANGLE / 180.0);
 17e:	85 ef       	ldi	r24, 0xF5	; 245
 180:	95 e0       	ldi	r25, 0x05	; 5
 182:	99 bd       	out	0x29, r25	; 41
 184:	88 bd       	out	0x28, r24	; 40
		
		case RIGHT:
		return head_rotate(0);
		
		case FORWARD:
		return head_rotate(90);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
		
		default:
		return -1;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
}
 18c:	08 95       	ret

0000018e <init_sonar>:
volatile uint32_t overFlowCounter = 0;
volatile uint32_t trig_counter = 0;
volatile uint32_t no_of_ticks = 0;

void init_sonar() {
	TRIG_OUTPUT_MODE();     // Set Trigger pin as output
 18e:	88 9a       	sbi	0x11, 0	; 17
	ECHO_INPUT_MODE();      // Set Echo pin as input
 190:	89 98       	cbi	0x11, 1	; 17
 192:	08 95       	ret

00000194 <trigger_sonar>:
}

void trigger_sonar() {
	TRIG_LOW();             // Clear pin before setting it high
 194:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	85 e3       	ldi	r24, 0x35	; 53
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <trigger_sonar+0x4>
 19c:	00 00       	nop
	_delay_us(10);           // Clear to zero and give time for electronics to set
	TRIG_HIGH();            // Set pin high
 19e:	90 9a       	sbi	0x12, 0	; 18
 1a0:	80 e5       	ldi	r24, 0x50	; 80
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <trigger_sonar+0xe>
	_delay_us(15);          // Send high pulse for minimum 10us
	TRIG_LOW();             // Clear pin
 1a6:	90 98       	cbi	0x12, 0	; 18
 1a8:	08 95       	ret

000001aa <__vector_16>:
}

ISR(TIMER0_OVF_vect) {  // Timer1 overflow interrupt
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
	overFlowCounter++;
 1bc:	80 91 0a 01 	lds	r24, 0x010A
 1c0:	90 91 0b 01 	lds	r25, 0x010B
 1c4:	a0 91 0c 01 	lds	r26, 0x010C
 1c8:	b0 91 0d 01 	lds	r27, 0x010D
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	80 93 0a 01 	sts	0x010A, r24
 1d6:	90 93 0b 01 	sts	0x010B, r25
 1da:	a0 93 0c 01 	sts	0x010C, r26
 1de:	b0 93 0d 01 	sts	0x010D, r27
	TCNT0 = 0;
 1e2:	12 be       	out	0x32, r1	; 50
}
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <read_sonar>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1f6:	f8 94       	cli
uint16_t read_sonar()
{
	uint16_t dist_in_cm = 0;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		init_sonar();                       // Setup pins and ports
 1f8:	ca df       	rcall	.-108    	; 0x18e <init_sonar>
		trigger_sonar();                    // send a 10us high pulse
 1fa:	cc df       	rcall	.-104    	; 0x194 <trigger_sonar>
		trig_counter = 0;
 1fc:	10 92 06 01 	sts	0x0106, r1
 200:	10 92 07 01 	sts	0x0107, r1
 204:	10 92 08 01 	sts	0x0108, r1
 208:	10 92 09 01 	sts	0x0109, r1

		while (!(ECHO_PIN & (1 << ECHO_BIT))) { // while echo pin is still low
 20c:	21 c0       	rjmp	.+66     	; 0x250 <read_sonar+0x5a>
			trig_counter++;
 20e:	80 91 06 01 	lds	r24, 0x0106
 212:	90 91 07 01 	lds	r25, 0x0107
 216:	a0 91 08 01 	lds	r26, 0x0108
 21a:	b0 91 09 01 	lds	r27, 0x0109
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	a1 1d       	adc	r26, r1
 222:	b1 1d       	adc	r27, r1
 224:	80 93 06 01 	sts	0x0106, r24
 228:	90 93 07 01 	sts	0x0107, r25
 22c:	a0 93 08 01 	sts	0x0108, r26
 230:	b0 93 09 01 	sts	0x0109, r27
			uint32_t max_response_time = SONAR_TIMEOUT;
			if (trig_counter > max_response_time) {  // SONAR_TIMEOUT
 234:	80 91 06 01 	lds	r24, 0x0106
 238:	90 91 07 01 	lds	r25, 0x0107
 23c:	a0 91 08 01 	lds	r26, 0x0108
 240:	b0 91 09 01 	lds	r27, 0x0109
 244:	8f 36       	cpi	r24, 0x6F	; 111
 246:	9c 46       	sbci	r25, 0x6C	; 108
 248:	a1 40       	sbci	r26, 0x01	; 1
 24a:	b1 05       	cpc	r27, r1
 24c:	08 f0       	brcs	.+2      	; 0x250 <read_sonar+0x5a>
 24e:	61 c0       	rjmp	.+194    	; 0x312 <read_sonar+0x11c>
	{
		init_sonar();                       // Setup pins and ports
		trigger_sonar();                    // send a 10us high pulse
		trig_counter = 0;

		while (!(ECHO_PIN & (1 << ECHO_BIT))) { // while echo pin is still low
 250:	81 9b       	sbis	0x10, 1	; 16
 252:	dd cf       	rjmp	.-70     	; 0x20e <read_sonar+0x18>
			if (trig_counter > max_response_time) {  // SONAR_TIMEOUT
				return TRIG_ERROR;
			}
		}

		TCNT0=0;							// reset timer
 254:	12 be       	out	0x32, r1	; 50
		TCCR0 |= (1 << CS00);				// start 16 bit timer with no prescaler
 256:	83 b7       	in	r24, 0x33	; 51
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	83 bf       	out	0x33, r24	; 51
		TIMSK |= (1 << TOIE0);				// enable overflow interrupt on timer1
 25c:	87 b7       	in	r24, 0x37	; 55
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	87 bf       	out	0x37, r24	; 55
		overFlowCounter=0;                  // reset overflow counter
 262:	10 92 0a 01 	sts	0x010A, r1
 266:	10 92 0b 01 	sts	0x010B, r1
 26a:	10 92 0c 01 	sts	0x010C, r1
 26e:	10 92 0d 01 	sts	0x010D, r1
		sei();                              // enable global interrupts
 272:	78 94       	sei

		while ((ECHO_PIN & (1 << ECHO_BIT))) { // while echo pin is still high
 274:	20 c0       	rjmp	.+64     	; 0x2b6 <read_sonar+0xc0>
			trig_counter++;
 276:	80 91 06 01 	lds	r24, 0x0106
 27a:	90 91 07 01 	lds	r25, 0x0107
 27e:	a0 91 08 01 	lds	r26, 0x0108
 282:	b0 91 09 01 	lds	r27, 0x0109
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	a1 1d       	adc	r26, r1
 28a:	b1 1d       	adc	r27, r1
 28c:	80 93 06 01 	sts	0x0106, r24
 290:	90 93 07 01 	sts	0x0107, r25
 294:	a0 93 08 01 	sts	0x0108, r26
 298:	b0 93 09 01 	sts	0x0109, r27
			uint32_t max_response_time = SONAR_TIMEOUT;
			if (trig_counter > max_response_time){   // SONAR_TIMEOUT
 29c:	80 91 06 01 	lds	r24, 0x0106
 2a0:	90 91 07 01 	lds	r25, 0x0107
 2a4:	a0 91 08 01 	lds	r26, 0x0108
 2a8:	b0 91 09 01 	lds	r27, 0x0109
 2ac:	8f 36       	cpi	r24, 0x6F	; 111
 2ae:	9c 46       	sbci	r25, 0x6C	; 108
 2b0:	a1 40       	sbci	r26, 0x01	; 1
 2b2:	b1 05       	cpc	r27, r1
 2b4:	70 f5       	brcc	.+92     	; 0x312 <read_sonar+0x11c>
		TCCR0 |= (1 << CS00);				// start 16 bit timer with no prescaler
		TIMSK |= (1 << TOIE0);				// enable overflow interrupt on timer1
		overFlowCounter=0;                  // reset overflow counter
		sei();                              // enable global interrupts

		while ((ECHO_PIN & (1 << ECHO_BIT))) { // while echo pin is still high
 2b6:	81 99       	sbic	0x10, 1	; 16
 2b8:	de cf       	rjmp	.-68     	; 0x276 <read_sonar+0x80>
			if (trig_counter > max_response_time){   // SONAR_TIMEOUT
				return TRIG_ERROR;
			}
		}
		
		TCCR0 = 0x00;
 2ba:	13 be       	out	0x33, r1	; 51
		sei();
 2bc:	78 94       	sei
		
		no_of_ticks = ((overFlowCounter * TIMER0_MAX) + TCNT0);			// counter count
 2be:	20 91 0a 01 	lds	r18, 0x010A
 2c2:	30 91 0b 01 	lds	r19, 0x010B
 2c6:	40 91 0c 01 	lds	r20, 0x010C
 2ca:	50 91 0d 01 	lds	r21, 0x010D
 2ce:	e2 b7       	in	r30, 0x32	; 50
 2d0:	af ef       	ldi	r26, 0xFF	; 255
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	27 d5       	rcall	.+2638   	; 0xd24 <__muluhisi3>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	8e 0f       	add	r24, r30
 2dc:	91 1d       	adc	r25, r1
 2de:	a1 1d       	adc	r26, r1
 2e0:	b1 1d       	adc	r27, r1
 2e2:	80 93 02 01 	sts	0x0102, r24
 2e6:	90 93 03 01 	sts	0x0103, r25
 2ea:	a0 93 04 01 	sts	0x0104, r26
 2ee:	b0 93 05 01 	sts	0x0105, r27
		dist_in_cm = (no_of_ticks / (CONVERT_TO_CM * CYCLES_PER_US));	// distance in cm
 2f2:	60 91 02 01 	lds	r22, 0x0102
 2f6:	70 91 03 01 	lds	r23, 0x0103
 2fa:	80 91 04 01 	lds	r24, 0x0104
 2fe:	90 91 05 01 	lds	r25, 0x0105
 302:	20 ea       	ldi	r18, 0xA0	; 160
 304:	33 e0       	ldi	r19, 0x03	; 3
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	e1 d4       	rcall	.+2498   	; 0xcce <__udivmodsi4>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 30c:	78 94       	sei
	}
	return (dist_in_cm);
 30e:	c9 01       	movw	r24, r18
 310:	08 95       	ret
 312:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	9f ef       	ldi	r25, 0xFF	; 255
}
 318:	08 95       	ret

0000031a <sample_sonar>:

uint16_t sample_sonar(uint8_t precision)
{
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	d8 2f       	mov	r29, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 324:	f8 94       	cli
	uint16_t res;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		uint8_t n;

		res = read_sonar();
 326:	67 df       	rcall	.-306    	; 0x1f6 <read_sonar>
 328:	8c 01       	movw	r16, r24
		for(n = 0; n < precision && (res == ECHO_ERROR || res == TRIG_ERROR || noObstacle(res)); n++)
 32a:	d1 11       	cpse	r29, r1
 32c:	07 c0       	rjmp	.+14     	; 0x33c <sample_sonar+0x22>
 32e:	11 c0       	rjmp	.+34     	; 0x352 <sample_sonar+0x38>
		{
			res = read_sonar();
 330:	62 df       	rcall	.-316    	; 0x1f6 <read_sonar>
 332:	8c 01       	movw	r16, r24
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		uint8_t n;

		res = read_sonar();
		for(n = 0; n < precision && (res == ECHO_ERROR || res == TRIG_ERROR || noObstacle(res)); n++)
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	cd 13       	cpse	r28, r29
 338:	02 c0       	rjmp	.+4      	; 0x33e <sample_sonar+0x24>
 33a:	0b c0       	rjmp	.+22     	; 0x352 <sample_sonar+0x38>
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	98 01       	movw	r18, r16
 340:	2e 5f       	subi	r18, 0xFE	; 254
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	98 f3       	brcs	.-26     	; 0x330 <sample_sonar+0x16>
 34a:	c8 01       	movw	r24, r16
 34c:	cd d2       	rcall	.+1434   	; 0x8e8 <noObstacle>
 34e:	81 11       	cpse	r24, r1
 350:	ef cf       	rjmp	.-34     	; 0x330 <sample_sonar+0x16>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 352:	78 94       	sei
		{
			res = read_sonar();
		}
	}
	return res;
}
 354:	c8 01       	movw	r24, r16
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <read_sonar_precise>:

uint16_t read_sonar_precise()
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 364:	f8 94       	cli
	uint16_t data;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		data = read_sonar();
 366:	47 df       	rcall	.-370    	; 0x1f6 <read_sonar>
 368:	ec 01       	movw	r28, r24
		if(data == ECHO_ERROR || data == TRIG_ERROR || noObstacle(data))
 36a:	02 96       	adiw	r24, 0x02	; 2
 36c:	02 97       	sbiw	r24, 0x02	; 2
 36e:	20 f0       	brcs	.+8      	; 0x378 <read_sonar_precise+0x18>
 370:	ce 01       	movw	r24, r28
 372:	ba d2       	rcall	.+1396   	; 0x8e8 <noObstacle>
 374:	88 23       	and	r24, r24
 376:	19 f0       	breq	.+6      	; 0x37e <read_sonar_precise+0x1e>
		data = sample_sonar(PRESICION);
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	cf df       	rcall	.-98     	; 0x31a <sample_sonar>
 37c:	ec 01       	movw	r28, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 37e:	78 94       	sei
	}
	return data;
 380:	ce 01       	movw	r24, r28
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <wheels_init>:



void wheels_init(uint8_t ACTION)
{
	DDROUT = 0xff;
 388:	9f ef       	ldi	r25, 0xFF	; 255
 38a:	9a bb       	out	0x1a, r25	; 26
	
	if(ACTION == HIGH)
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	19 f4       	brne	.+6      	; 0x396 <wheels_init+0xe>
	{
		OUT |= 1 << ENABLE_LEFT_WHEEL;
 390:	d8 9a       	sbi	0x1b, 0	; 27
		OUT |= 1 << ENABLE_RIGHT_WHEEL;
 392:	d9 9a       	sbi	0x1b, 1	; 27
 394:	08 95       	ret
	}
	else if(ACTION == LOW)
 396:	81 11       	cpse	r24, r1
 398:	02 c0       	rjmp	.+4      	; 0x39e <wheels_init+0x16>
	{
		OUT &= ~(1 << ENABLE_LEFT_WHEEL);
 39a:	d8 98       	cbi	0x1b, 0	; 27
		OUT &= ~(1 << ENABLE_RIGHT_WHEEL);
 39c:	d9 98       	cbi	0x1b, 1	; 27
 39e:	08 95       	ret

000003a0 <wheel_act>:
void wheel_act(uint8_t WHEEL, uint8_t ACTION)
{
	// FIND PROPER ACTION VALUES
	uint8_t IN_FIRST = 0, IN_SECOND = 0;

	switch(ACTION)
 3a0:	62 30       	cpi	r22, 0x02	; 2
 3a2:	c1 f1       	breq	.+112    	; 0x414 <wheel_act+0x74>
 3a4:	63 30       	cpi	r22, 0x03	; 3
 3a6:	d1 f1       	breq	.+116    	; 0x41c <wheel_act+0x7c>
 3a8:	61 11       	cpse	r22, r1
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <wheel_act+0x10>
		IN_SECOND = HIGH;
		break;
		
		case BRAKE:
		IN_FIRST = HIGH;
		IN_SECOND = HIGH;
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	33 c0       	rjmp	.+102    	; 0x416 <wheel_act+0x76>
		
		default:
		break;
	}
	
	if(WHEEL == ALL_WHEELS)
 3b0:	88 23       	and	r24, r24
 3b2:	29 f0       	breq	.+10     	; 0x3be <wheel_act+0x1e>
}

void wheel_act(uint8_t WHEEL, uint8_t ACTION)
{
	// FIND PROPER ACTION VALUES
	uint8_t IN_FIRST = 0, IN_SECOND = 0;
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	3a c0       	rjmp	.+116    	; 0x42c <wheel_act+0x8c>
		break;
	}
	
	if(WHEEL == ALL_WHEELS)
	{
		BIT_TOGGLE(OUT, IN1, IN_FIRST);
 3b8:	db 9a       	sbi	0x1b, 3	; 27
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <wheel_act+0x28>
}

void wheel_act(uint8_t WHEEL, uint8_t ACTION)
{
	// FIND PROPER ACTION VALUES
	uint8_t IN_FIRST = 0, IN_SECOND = 0;
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <wheel_act+0x24>
		IN_SECOND = LOW;
		break;
		
		case BACKWARD:
		IN_FIRST = LOW;
		IN_SECOND = HIGH;
 3c2:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}
	
	if(WHEEL == ALL_WHEELS)
	{
		BIT_TOGGLE(OUT, IN1, IN_FIRST);
 3c4:	db 98       	cbi	0x1b, 3	; 27
 3c6:	80 e0       	ldi	r24, 0x00	; 0
		BIT_TOGGLE(OUT, IN2, IN_SECOND);
 3c8:	99 23       	and	r25, r25
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <wheel_act+0x30>
 3cc:	dd 9a       	sbi	0x1b, 5	; 27
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <wheel_act+0x32>
 3d0:	dd 98       	cbi	0x1b, 5	; 27
		BIT_TOGGLE(OUT, IN3, IN_FIRST);
 3d2:	88 23       	and	r24, r24
 3d4:	11 f0       	breq	.+4      	; 0x3da <wheel_act+0x3a>
 3d6:	dc 9a       	sbi	0x1b, 4	; 27
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <wheel_act+0x3c>
 3da:	dc 98       	cbi	0x1b, 4	; 27
		BIT_TOGGLE(OUT, IN4, IN_SECOND);
 3dc:	99 23       	and	r25, r25
 3de:	11 f0       	breq	.+4      	; 0x3e4 <wheel_act+0x44>
 3e0:	da 9a       	sbi	0x1b, 2	; 27
 3e2:	08 95       	ret
 3e4:	da 98       	cbi	0x1b, 2	; 27
 3e6:	08 95       	ret
	}
	else if(WHEEL == LEFT_WHEELS)
	{
		BIT_TOGGLE(OUT, IN1, IN_FIRST);
 3e8:	db 9a       	sbi	0x1b, 3	; 27
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <wheel_act+0x4e>
 3ec:	db 98       	cbi	0x1b, 3	; 27
		BIT_TOGGLE(OUT, IN2, IN_SECOND);
 3ee:	99 23       	and	r25, r25
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <wheel_act+0x56>
 3f2:	dd 9a       	sbi	0x1b, 5	; 27
 3f4:	08 95       	ret
 3f6:	dd 98       	cbi	0x1b, 5	; 27
 3f8:	08 95       	ret
	}
	else if(WHEEL == RIGHT_WHEELS)
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	d9 f4       	brne	.+54     	; 0x434 <wheel_act+0x94>
	{
		BIT_TOGGLE(OUT, IN3, IN_FIRST);
 3fe:	22 23       	and	r18, r18
 400:	11 f0       	breq	.+4      	; 0x406 <wheel_act+0x66>
 402:	dc 9a       	sbi	0x1b, 4	; 27
 404:	01 c0       	rjmp	.+2      	; 0x408 <wheel_act+0x68>
 406:	dc 98       	cbi	0x1b, 4	; 27
		BIT_TOGGLE(OUT, IN4, IN_SECOND);
 408:	99 23       	and	r25, r25
 40a:	11 f0       	breq	.+4      	; 0x410 <wheel_act+0x70>
 40c:	da 9a       	sbi	0x1b, 2	; 27
 40e:	08 95       	ret
 410:	da 98       	cbi	0x1b, 2	; 27
 412:	08 95       	ret

	switch(ACTION)
	{
		case FORWARD:
		IN_FIRST = HIGH;
		IN_SECOND = LOW;
 414:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		break;
	}
	
	if(WHEEL == ALL_WHEELS)
 416:	88 23       	and	r24, r24
 418:	79 f2       	breq	.-98     	; 0x3b8 <wheel_act+0x18>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <wheel_act+0x84>
 41c:	88 23       	and	r24, r24
 41e:	89 f2       	breq	.-94     	; 0x3c2 <wheel_act+0x22>
		IN_SECOND = LOW;
		break;
		
		case BACKWARD:
		IN_FIRST = LOW;
		IN_SECOND = HIGH;
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	04 c0       	rjmp	.+8      	; 0x42c <wheel_act+0x8c>
		BIT_TOGGLE(OUT, IN1, IN_FIRST);
		BIT_TOGGLE(OUT, IN2, IN_SECOND);
		BIT_TOGGLE(OUT, IN3, IN_FIRST);
		BIT_TOGGLE(OUT, IN4, IN_SECOND);
	}
	else if(WHEEL == LEFT_WHEELS)
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	01 f3       	breq	.-64     	; 0x3e8 <wheel_act+0x48>
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	e7 cf       	rjmp	.-50     	; 0x3fa <wheel_act+0x5a>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	f1 f2       	breq	.-68     	; 0x3ec <wheel_act+0x4c>
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	e3 cf       	rjmp	.-58     	; 0x3fa <wheel_act+0x5a>
 434:	08 95       	ret

00000436 <step>:
		BIT_TOGGLE(OUT, IN4, IN_SECOND);
	}
}

void step(uint8_t WHEEL, uint8_t ISFORWARD)
{
 436:	cf 93       	push	r28
 438:	c8 2f       	mov	r28, r24
	if(ISFORWARD == POSITIVE)
 43a:	61 11       	cpse	r22, r1
 43c:	0f c0       	rjmp	.+30     	; 0x45c <step+0x26>
	{
		wheel_act(WHEEL, FORWARD);
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	af df       	rcall	.-162    	; 0x3a0 <wheel_act>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	87 e8       	ldi	r24, 0x87	; 135
 446:	93 e1       	ldi	r25, 0x13	; 19
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <step+0x12>
 450:	00 c0       	rjmp	.+0      	; 0x452 <step+0x1c>
 452:	00 00       	nop
		SLEEP(STEP_LEN);
		wheel_act(WHEEL, BRAKE);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	8c 2f       	mov	r24, r28
 458:	a3 df       	rcall	.-186    	; 0x3a0 <wheel_act>
 45a:	10 c0       	rjmp	.+32     	; 0x47c <step+0x46>
	}
	else if(ISFORWARD == NEGATIVE)
 45c:	61 30       	cpi	r22, 0x01	; 1
 45e:	71 f4       	brne	.+28     	; 0x47c <step+0x46>
	{
		wheel_act(WHEEL, BACKWARD);
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	9e df       	rcall	.-196    	; 0x3a0 <wheel_act>
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	87 e8       	ldi	r24, 0x87	; 135
 468:	93 e1       	ldi	r25, 0x13	; 19
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <step+0x34>
 472:	00 c0       	rjmp	.+0      	; 0x474 <step+0x3e>
 474:	00 00       	nop
		SLEEP(STEP_LEN);
		wheel_act(WHEEL, BRAKE);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	8c 2f       	mov	r24, r28
 47a:	92 df       	rcall	.-220    	; 0x3a0 <wheel_act>
	}
}
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <wheels_turn_stay>:

void wheels_turn_stay(uint8_t DIRECTION) {
	if(DIRECTION == LEFT)
 480:	85 30       	cpi	r24, 0x05	; 5
 482:	39 f4       	brne	.+14     	; 0x492 <wheels_turn_stay+0x12>
	{
		wheel_act(LEFT_WHEELS, BACKWARD);
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	8b df       	rcall	.-234    	; 0x3a0 <wheel_act>
		wheel_act(RIGHT_WHEELS, FORWARD);
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	88 cf       	rjmp	.-240    	; 0x3a0 <wheel_act>
 490:	08 95       	ret
	}
	else if(DIRECTION == RIGHT)
 492:	84 30       	cpi	r24, 0x04	; 4
 494:	31 f4       	brne	.+12     	; 0x4a2 <wheels_turn_stay+0x22>
	{
		wheel_act(LEFT_WHEELS, FORWARD);
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	82 df       	rcall	.-252    	; 0x3a0 <wheel_act>
		wheel_act(RIGHT_WHEELS, BACKWARD);
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	7f cf       	rjmp	.-258    	; 0x3a0 <wheel_act>
 4a2:	08 95       	ret

000004a4 <wheels_turn>:
	}
}

void wheels_turn(uint8_t DIRECTION, uint8_t CUR_DIR) {
 4a4:	cf 93       	push	r28
 4a6:	c6 2f       	mov	r28, r22
	if(DIRECTION == LEFT)
 4a8:	85 30       	cpi	r24, 0x05	; 5
 4aa:	39 f4       	brne	.+14     	; 0x4ba <wheels_turn+0x16>
	{
		wheel_act(LEFT_WHEELS, BRAKE);
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	77 df       	rcall	.-274    	; 0x3a0 <wheel_act>
		wheel_act(RIGHT_WHEELS, CUR_DIR);
 4b2:	6c 2f       	mov	r22, r28
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	74 df       	rcall	.-280    	; 0x3a0 <wheel_act>
 4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <wheels_turn+0x24>
	}
	else if(DIRECTION == RIGHT)
 4ba:	84 30       	cpi	r24, 0x04	; 4
 4bc:	29 f4       	brne	.+10     	; 0x4c8 <wheels_turn+0x24>
	{
		wheel_act(LEFT_WHEELS, CUR_DIR);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	6f df       	rcall	.-290    	; 0x3a0 <wheel_act>
		wheel_act(RIGHT_WHEELS, BRAKE);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	6c df       	rcall	.-296    	; 0x3a0 <wheel_act>
	}
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <main>:



int main()
{
	wheels_init(HIGH);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	5c df       	rcall	.-328    	; 0x388 <wheels_init>
	bluetooth_init();
 4d0:	05 de       	rcall	.-1014   	; 0xdc <bluetooth_init>
	servo_init();
 4d2:	19 de       	rcall	.-974    	; 0x106 <servo_init>
	
	// DEVICES ARE INITIALIZED
	control_mode = MODE_HANDDRIVEN;
 4d4:	10 92 11 01 	sts	0x0111, r1
	DDRC = 0xff;
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	84 bb       	out	0x14, r24	; 20
	
	while(1)
	{
		switch(control_mode)
 4dc:	80 91 11 01 	lds	r24, 0x0111
 4e0:	88 23       	and	r24, r24
 4e2:	21 f0       	breq	.+8      	; 0x4ec <main+0x20>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	d1 f7       	brne	.-12     	; 0x4dc <main+0x10>
		{
			case MODE_AUTOPILOT:
			artificial_control();
 4e8:	08 d0       	rcall	.+16     	; 0x4fa <artificial_control>
			break;
 4ea:	f8 cf       	rjmp	.-16     	; 0x4dc <main+0x10>
			
			case MODE_HANDDRIVEN:
			manual_control();
 4ec:	01 d0       	rcall	.+2      	; 0x4f0 <manual_control>
			break;
 4ee:	f6 cf       	rjmp	.-20     	; 0x4dc <main+0x10>

000004f0 <manual_control>:
	}
}

void handle_look_action(uint8_t ANGLE)
{
	if(head_rotate(ANGLE) != 0);
 4f0:	80 91 11 01 	lds	r24, 0x0111
 4f4:	88 23       	and	r24, r24
 4f6:	e1 f3       	breq	.-8      	; 0x4f0 <manual_control>
 4f8:	08 95       	ret

000004fa <artificial_control>:
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	2a de       	rcall	.-940    	; 0x158 <head_look>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	89 e6       	ldi	r24, 0x69	; 105
 508:	98 e1       	ldi	r25, 0x18	; 24
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <artificial_control+0x10>
 512:	00 c0       	rjmp	.+0      	; 0x514 <artificial_control+0x1a>
 514:	00 00       	nop
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	1f de       	rcall	.-962    	; 0x158 <head_look>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	89 e6       	ldi	r24, 0x69	; 105
 51e:	98 e1       	ldi	r25, 0x18	; 24
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <artificial_control+0x26>
 528:	00 c0       	rjmp	.+0      	; 0x52a <artificial_control+0x30>
 52a:	00 00       	nop
 52c:	1f e0       	ldi	r17, 0x0F	; 15
 52e:	d0 ef       	ldi	r29, 0xF0	; 240
 530:	cf ef       	ldi	r28, 0xFF	; 255
 532:	89 c0       	rjmp	.+274    	; 0x646 <artificial_control+0x14c>
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	10 de       	rcall	.-992    	; 0x158 <head_look>
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	83 ec       	ldi	r24, 0xC3	; 195
 53c:	99 e0       	ldi	r25, 0x09	; 9
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <artificial_control+0x44>
 546:	00 c0       	rjmp	.+0      	; 0x548 <artificial_control+0x4e>
 548:	00 00       	nop
 54a:	0a df       	rcall	.-492    	; 0x360 <read_sonar_precise>
 54c:	9c 01       	movw	r18, r24
 54e:	2e 5f       	subi	r18, 0xFE	; 254
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	22 30       	cpi	r18, 0x02	; 2
 554:	31 05       	cpc	r19, r1
 556:	10 f4       	brcc	.+4      	; 0x55c <artificial_control+0x62>
 558:	c5 bb       	out	0x15, r28	; 21
 55a:	75 c0       	rjmp	.+234    	; 0x646 <artificial_control+0x14c>
 55c:	84 30       	cpi	r24, 0x04	; 4
 55e:	91 05       	cpc	r25, r1
 560:	09 f4       	brne	.+2      	; 0x564 <artificial_control+0x6a>
 562:	6e c0       	rjmp	.+220    	; 0x640 <artificial_control+0x146>
 564:	44 97       	sbiw	r24, 0x14	; 20
 566:	08 f0       	brcs	.+2      	; 0x56a <artificial_control+0x70>
 568:	6b c0       	rjmp	.+214    	; 0x640 <artificial_control+0x146>
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	18 df       	rcall	.-464    	; 0x3a0 <wheel_act>
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	f2 dd       	rcall	.-1052   	; 0x158 <head_look>
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	83 ec       	ldi	r24, 0xC3	; 195
 578:	99 e0       	ldi	r25, 0x09	; 9
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <artificial_control+0x80>
 582:	00 c0       	rjmp	.+0      	; 0x584 <artificial_control+0x8a>
 584:	00 00       	nop
 586:	ec de       	rcall	.-552    	; 0x360 <read_sonar_precise>
 588:	9c 01       	movw	r18, r24
 58a:	2e 5f       	subi	r18, 0xFE	; 254
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	22 30       	cpi	r18, 0x02	; 2
 590:	31 05       	cpc	r19, r1
 592:	10 f4       	brcc	.+4      	; 0x598 <artificial_control+0x9e>
 594:	d5 bb       	out	0x15, r29	; 21
 596:	57 c0       	rjmp	.+174    	; 0x646 <artificial_control+0x14c>
 598:	85 31       	cpi	r24, 0x15	; 21
 59a:	91 05       	cpc	r25, r1
 59c:	78 f0       	brcs	.+30     	; 0x5bc <artificial_control+0xc2>
 59e:	84 e0       	ldi	r24, 0x04	; 4
 5a0:	6f df       	rcall	.-290    	; 0x480 <wheels_turn_stay>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	87 e8       	ldi	r24, 0x87	; 135
 5a6:	93 e1       	ldi	r25, 0x13	; 19
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <artificial_control+0xae>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <artificial_control+0xb8>
 5b2:	00 00       	nop
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	f3 de       	rcall	.-538    	; 0x3a0 <wheel_act>
 5ba:	45 c0       	rjmp	.+138    	; 0x646 <artificial_control+0x14c>
 5bc:	04 97       	sbiw	r24, 0x04	; 4
 5be:	09 f4       	brne	.+2      	; 0x5c2 <artificial_control+0xc8>
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <artificial_control+0x14c>
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	c9 dd       	rcall	.-1134   	; 0x158 <head_look>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	83 ec       	ldi	r24, 0xC3	; 195
 5ca:	99 e0       	ldi	r25, 0x09	; 9
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <artificial_control+0xd2>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <artificial_control+0xdc>
 5d6:	00 00       	nop
 5d8:	c3 de       	rcall	.-634    	; 0x360 <read_sonar_precise>
 5da:	9c 01       	movw	r18, r24
 5dc:	2e 5f       	subi	r18, 0xFE	; 254
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	22 30       	cpi	r18, 0x02	; 2
 5e2:	31 05       	cpc	r19, r1
 5e4:	10 f4       	brcc	.+4      	; 0x5ea <artificial_control+0xf0>
 5e6:	15 bb       	out	0x15, r17	; 21
 5e8:	2e c0       	rjmp	.+92     	; 0x646 <artificial_control+0x14c>
 5ea:	45 97       	sbiw	r24, 0x15	; 21
 5ec:	78 f0       	brcs	.+30     	; 0x60c <artificial_control+0x112>
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	47 df       	rcall	.-370    	; 0x480 <wheels_turn_stay>
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	87 e8       	ldi	r24, 0x87	; 135
 5f6:	93 e1       	ldi	r25, 0x13	; 19
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <artificial_control+0xfe>
 600:	00 c0       	rjmp	.+0      	; 0x602 <artificial_control+0x108>
 602:	00 00       	nop
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	cb de       	rcall	.-618    	; 0x3a0 <wheel_act>
 60a:	1d c0       	rjmp	.+58     	; 0x646 <artificial_control+0x14c>
 60c:	85 e0       	ldi	r24, 0x05	; 5
 60e:	38 df       	rcall	.-400    	; 0x480 <wheels_turn_stay>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	87 e8       	ldi	r24, 0x87	; 135
 614:	93 e1       	ldi	r25, 0x13	; 19
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <artificial_control+0x11c>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <artificial_control+0x126>
 620:	00 00       	nop
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	2d df       	rcall	.-422    	; 0x480 <wheels_turn_stay>
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	87 e8       	ldi	r24, 0x87	; 135
 62a:	93 e1       	ldi	r25, 0x13	; 19
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <artificial_control+0x132>
 634:	00 c0       	rjmp	.+0      	; 0x636 <artificial_control+0x13c>
 636:	00 00       	nop
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	b1 de       	rcall	.-670    	; 0x3a0 <wheel_act>
 63e:	03 c0       	rjmp	.+6      	; 0x646 <artificial_control+0x14c>
 640:	62 e0       	ldi	r22, 0x02	; 2
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	ad de       	rcall	.-678    	; 0x3a0 <wheel_act>
 646:	80 91 11 01 	lds	r24, 0x0111
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	09 f4       	brne	.+2      	; 0x650 <artificial_control+0x156>
 64e:	72 cf       	rjmp	.-284    	; 0x534 <artificial_control+0x3a>
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	08 95       	ret

00000658 <handle_move_action>:
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	8a 30       	cpi	r24, 0x0A	; 10
 65c:	91 05       	cpc	r25, r1
 65e:	08 f0       	brcs	.+2      	; 0x662 <handle_move_action+0xa>
 660:	4b c0       	rjmp	.+150    	; 0x6f8 <handle_move_action+0xa0>
 662:	fc 01       	movw	r30, r24
 664:	ea 5b       	subi	r30, 0xBA	; 186
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	54 c3       	rjmp	.+1704   	; 0xd12 <__tablejump2__>
 66a:	80 91 00 01 	lds	r24, 0x0100
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	09 f4       	brne	.+2      	; 0x674 <handle_move_action+0x1c>
 672:	42 c0       	rjmp	.+132    	; 0x6f8 <handle_move_action+0xa0>
 674:	80 91 00 01 	lds	r24, 0x0100
 678:	88 23       	and	r24, r24
 67a:	09 f4       	brne	.+2      	; 0x67e <handle_move_action+0x26>
 67c:	3d c0       	rjmp	.+122    	; 0x6f8 <handle_move_action+0xa0>
 67e:	60 91 00 01 	lds	r22, 0x0100
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	0f cf       	rjmp	.-482    	; 0x4a4 <wheels_turn>
 686:	08 95       	ret
 688:	80 91 00 01 	lds	r24, 0x0100
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	a1 f1       	breq	.+104    	; 0x6f8 <handle_move_action+0xa0>
 690:	80 91 00 01 	lds	r24, 0x0100
 694:	88 23       	and	r24, r24
 696:	81 f1       	breq	.+96     	; 0x6f8 <handle_move_action+0xa0>
 698:	60 91 00 01 	lds	r22, 0x0100
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	02 cf       	rjmp	.-508    	; 0x4a4 <wheels_turn>
 6a0:	08 95       	ret
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	80 93 00 01 	sts	0x0100, r24
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	79 ce       	rjmp	.-782    	; 0x3a0 <wheel_act>
 6ae:	08 95       	ret
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	80 93 00 01 	sts	0x0100, r24
 6b6:	63 e0       	ldi	r22, 0x03	; 3
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	72 ce       	rjmp	.-796    	; 0x3a0 <wheel_act>
 6bc:	08 95       	ret
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	b9 ce       	rjmp	.-654    	; 0x436 <step>
 6c4:	08 95       	ret
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	b5 ce       	rjmp	.-662    	; 0x436 <step>
 6cc:	08 95       	ret
 6ce:	85 e0       	ldi	r24, 0x05	; 5
 6d0:	d7 ce       	rjmp	.-594    	; 0x480 <wheels_turn_stay>
 6d2:	08 95       	ret
 6d4:	84 e0       	ldi	r24, 0x04	; 4
 6d6:	d4 ce       	rjmp	.-600    	; 0x480 <wheels_turn_stay>
 6d8:	08 95       	ret
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 00 01 	sts	0x0100, r24
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	5d ce       	rjmp	.-838    	; 0x3a0 <wheel_act>
 6e6:	08 95       	ret
 6e8:	10 92 00 01 	sts	0x0100, r1
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	57 de       	rcall	.-850    	; 0x3a0 <wheel_act>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	80 93 00 01 	sts	0x0100, r24
 6f8:	08 95       	ret

000006fa <handle_datarequest_action>:
}

void handle_datarequest_action(uint8_t ACTION)
{
 6fa:	cf 93       	push	r28
	// sample size will decide precision of small distance obstacles
	uint16_t data;

	switch(ACTION)
 6fc:	81 11       	cpse	r24, r1
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <handle_datarequest_action+0x10>
	{
		case REQUEST_OBSTACLE_DISTANCE:
		
		data = read_sonar_precise();
 700:	2f de       	rcall	.-930    	; 0x360 <read_sonar_precise>
 702:	c9 2f       	mov	r28, r25
		
		bt_send_byte(data);
 704:	f8 dc       	rcall	.-1552   	; 0xf6 <bt_send_byte>
		bt_send_byte(data >> 8);
 706:	8c 2f       	mov	r24, r28
 708:	f6 dc       	rcall	.-1556   	; 0xf6 <bt_send_byte>

		default:
		break;
	}
}
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <handle_perform_action>:


void handle_perform_action(uint8_t ACTION)
{
	switch(ACTION){
 70e:	88 23       	and	r24, r24
 710:	19 f0       	breq	.+6      	; 0x718 <handle_perform_action+0xa>
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	89 f1       	breq	.+98     	; 0x778 <handle_perform_action+0x6a>
 716:	08 95       	ret
		case PERFORMANCE1:
		head_rotate(180);
 718:	84 eb       	ldi	r24, 0xB4	; 180
 71a:	01 dd       	rcall	.-1534   	; 0x11e <head_rotate>
		wheel_act(ALL_WHEELS, FORWARD);
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	3f de       	rcall	.-898    	; 0x3a0 <wheel_act>
 722:	2f ef       	ldi	r18, 0xFF	; 255
 724:	83 ed       	ldi	r24, 0xD3	; 211
 726:	90 e3       	ldi	r25, 0x30	; 48
 728:	21 50       	subi	r18, 0x01	; 1
 72a:	80 40       	sbci	r24, 0x00	; 0
 72c:	90 40       	sbci	r25, 0x00	; 0
 72e:	e1 f7       	brne	.-8      	; 0x728 <handle_perform_action+0x1a>
 730:	00 c0       	rjmp	.+0      	; 0x732 <handle_perform_action+0x24>
 732:	00 00       	nop
		SLEEP(1000);
		
		head_rotate(135);
 734:	87 e8       	ldi	r24, 0x87	; 135
 736:	f3 dc       	rcall	.-1562   	; 0x11e <head_rotate>
		wheel_act(LEFT_WHEELS, COAST);
 738:	61 e0       	ldi	r22, 0x01	; 1
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	31 de       	rcall	.-926    	; 0x3a0 <wheel_act>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	85 ea       	ldi	r24, 0xA5	; 165
 742:	9e e0       	ldi	r25, 0x0E	; 14
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <handle_perform_action+0x36>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <handle_perform_action+0x40>
 74e:	00 00       	nop
		SLEEP(300);
		
		head_rotate(0);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	e5 dc       	rcall	.-1590   	; 0x11e <head_rotate>
		wheel_act(LEFT_WHEELS, BACKWARD);
 754:	63 e0       	ldi	r22, 0x03	; 3
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	23 de       	rcall	.-954    	; 0x3a0 <wheel_act>
 75a:	2f ef       	ldi	r18, 0xFF	; 255
 75c:	82 e5       	ldi	r24, 0x52	; 82
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <handle_perform_action+0x52>
 768:	00 c0       	rjmp	.+0      	; 0x76a <handle_perform_action+0x5c>
 76a:	00 00       	nop
		SLEEP(150);
		
		head_rotate(90);
 76c:	8a e5       	ldi	r24, 0x5A	; 90
 76e:	d7 dc       	rcall	.-1618   	; 0x11e <head_rotate>
		wheel_act(ALL_WHEELS, BRAKE);
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	15 ce       	rjmp	.-982    	; 0x3a0 <wheel_act>
		break;
 776:	08 95       	ret
		
		case PERFORMANCE2:
		head_rotate(0);
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	d1 dc       	rcall	.-1630   	; 0x11e <head_rotate>
		wheel_act(ALL_WHEELS, FORWARD);
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0f de       	rcall	.-994    	; 0x3a0 <wheel_act>
 782:	2f ef       	ldi	r18, 0xFF	; 255
 784:	83 ed       	ldi	r24, 0xD3	; 211
 786:	90 e3       	ldi	r25, 0x30	; 48
 788:	21 50       	subi	r18, 0x01	; 1
 78a:	80 40       	sbci	r24, 0x00	; 0
 78c:	90 40       	sbci	r25, 0x00	; 0
 78e:	e1 f7       	brne	.-8      	; 0x788 <handle_perform_action+0x7a>
 790:	00 c0       	rjmp	.+0      	; 0x792 <handle_perform_action+0x84>
 792:	00 00       	nop
		SLEEP(1000);
		
		wheel_act(ALL_WHEELS, BRAKE);
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	03 de       	rcall	.-1018   	; 0x3a0 <wheel_act>
		
		head_rotate(0);
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	c0 dc       	rcall	.-1664   	; 0x11e <head_rotate>
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	89 e6       	ldi	r24, 0x69	; 105
 7a2:	98 e1       	ldi	r25, 0x18	; 24
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	80 40       	sbci	r24, 0x00	; 0
 7a8:	90 40       	sbci	r25, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <handle_perform_action+0x96>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <handle_perform_action+0xa0>
 7ae:	00 00       	nop
		SLEEP(500);
		head_rotate(180);
 7b0:	84 eb       	ldi	r24, 0xB4	; 180
 7b2:	b5 dc       	rcall	.-1686   	; 0x11e <head_rotate>
 7b4:	2f ef       	ldi	r18, 0xFF	; 255
 7b6:	89 e6       	ldi	r24, 0x69	; 105
 7b8:	98 e1       	ldi	r25, 0x18	; 24
 7ba:	21 50       	subi	r18, 0x01	; 1
 7bc:	80 40       	sbci	r24, 0x00	; 0
 7be:	90 40       	sbci	r25, 0x00	; 0
 7c0:	e1 f7       	brne	.-8      	; 0x7ba <handle_perform_action+0xac>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <handle_perform_action+0xb6>
 7c4:	00 00       	nop
		SLEEP(500);
		head_rotate(0);
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	aa dc       	rcall	.-1708   	; 0x11e <head_rotate>
 7ca:	2f ef       	ldi	r18, 0xFF	; 255
 7cc:	89 e6       	ldi	r24, 0x69	; 105
 7ce:	98 e1       	ldi	r25, 0x18	; 24
 7d0:	21 50       	subi	r18, 0x01	; 1
 7d2:	80 40       	sbci	r24, 0x00	; 0
 7d4:	90 40       	sbci	r25, 0x00	; 0
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <handle_perform_action+0xc2>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <handle_perform_action+0xcc>
 7da:	00 00       	nop
		SLEEP(500);
		head_rotate(90);
 7dc:	8a e5       	ldi	r24, 0x5A	; 90
 7de:	9f dc       	rcall	.-1730   	; 0x11e <head_rotate>
 7e0:	2f ef       	ldi	r18, 0xFF	; 255
 7e2:	89 e6       	ldi	r24, 0x69	; 105
 7e4:	98 e1       	ldi	r25, 0x18	; 24
 7e6:	21 50       	subi	r18, 0x01	; 1
 7e8:	80 40       	sbci	r24, 0x00	; 0
 7ea:	90 40       	sbci	r25, 0x00	; 0
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <handle_perform_action+0xd8>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <handle_perform_action+0xe2>
 7f0:	00 00       	nop
 7f2:	08 95       	ret

000007f4 <__vector_30>:
volatile uint8_t cur_dir = COAST;


// ISR FOR BLUETOOTH SIGNALS HANDLING
ISR(USART1_RX_vect)
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	0b b6       	in	r0, 0x3b	; 59
 800:	0f 92       	push	r0
 802:	2f 93       	push	r18
 804:	3f 93       	push	r19
 806:	4f 93       	push	r20
 808:	5f 93       	push	r21
 80a:	6f 93       	push	r22
 80c:	7f 93       	push	r23
 80e:	8f 93       	push	r24
 810:	9f 93       	push	r25
 812:	af 93       	push	r26
 814:	bf 93       	push	r27
 816:	ef 93       	push	r30
 818:	ff 93       	push	r31
	if(bt_react)
 81a:	80 91 0e 01 	lds	r24, 0x010E
 81e:	88 23       	and	r24, r24
 820:	09 f4       	brne	.+2      	; 0x824 <__vector_30+0x30>
 822:	48 c0       	rjmp	.+144    	; 0x8b4 <__vector_30+0xc0>
	{
		data = UDR1;
 824:	80 91 9c 00 	lds	r24, 0x009C
 828:	80 93 0f 01 	sts	0x010F, r24
		bt_react = 0;
 82c:	10 92 0e 01 	sts	0x010E, r1
		
		if(control_mode == MODE_HANDDRIVEN)
 830:	80 91 11 01 	lds	r24, 0x0111
 834:	81 11       	cpse	r24, r1
 836:	24 c0       	rjmp	.+72     	; 0x880 <__vector_30+0x8c>
		{
			// HANDLING BT CONTROL ON HANDDRIVEN MODE
			#pragma region
			switch(action){
 838:	80 91 10 01 	lds	r24, 0x0110
 83c:	82 30       	cpi	r24, 0x02	; 2
 83e:	99 f0       	breq	.+38     	; 0x866 <__vector_30+0x72>
 840:	28 f4       	brcc	.+10     	; 0x84c <__vector_30+0x58>
 842:	88 23       	and	r24, r24
 844:	41 f0       	breq	.+16     	; 0x856 <__vector_30+0x62>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	51 f0       	breq	.+20     	; 0x85e <__vector_30+0x6a>
 84a:	3b c0       	rjmp	.+118    	; 0x8c2 <__vector_30+0xce>
 84c:	83 30       	cpi	r24, 0x03	; 3
 84e:	79 f0       	breq	.+30     	; 0x86e <__vector_30+0x7a>
 850:	84 30       	cpi	r24, 0x04	; 4
 852:	91 f0       	breq	.+36     	; 0x878 <__vector_30+0x84>
 854:	36 c0       	rjmp	.+108    	; 0x8c2 <__vector_30+0xce>
				case ACTION_MOVE:
				handle_move_action(data);
 856:	80 91 0f 01 	lds	r24, 0x010F
 85a:	fe de       	rcall	.-516    	; 0x658 <handle_move_action>
				break;
 85c:	32 c0       	rjmp	.+100    	; 0x8c2 <__vector_30+0xce>
				
				case ACTION_LOOK:
				handle_look_action(data);
 85e:	80 91 0f 01 	lds	r24, 0x010F
	}
}

void handle_look_action(uint8_t ANGLE)
{
	if(head_rotate(ANGLE) != 0);
 862:	5d dc       	rcall	.-1862   	; 0x11e <head_rotate>
 864:	2e c0       	rjmp	.+92     	; 0x8c2 <__vector_30+0xce>
				case ACTION_LOOK:
				handle_look_action(data);
				break;
				
				case ACTION_PERFORM:
				handle_perform_action(data);
 866:	80 91 0f 01 	lds	r24, 0x010F
 86a:	51 df       	rcall	.-350    	; 0x70e <handle_perform_action>
				break;
 86c:	2a c0       	rjmp	.+84     	; 0x8c2 <__vector_30+0xce>
				
				case ACTION_CHANGEMODE:
				control_mode = data;
 86e:	80 91 0f 01 	lds	r24, 0x010F
 872:	80 93 11 01 	sts	0x0111, r24
				break;
 876:	25 c0       	rjmp	.+74     	; 0x8c2 <__vector_30+0xce>

				case ACTION_DATAREQUEST:
				handle_datarequest_action(data);
 878:	80 91 0f 01 	lds	r24, 0x010F
 87c:	3e df       	rcall	.-388    	; 0x6fa <handle_datarequest_action>
				break;
 87e:	21 c0       	rjmp	.+66     	; 0x8c2 <__vector_30+0xce>
				default:
				break;
			}
			#pragma endregion
		}
		else if(control_mode == MODE_AUTOPILOT)
 880:	80 91 11 01 	lds	r24, 0x0111
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	e9 f4       	brne	.+58     	; 0x8c2 <__vector_30+0xce>
		{
			// HANDLING BT CONTROL ON AUTOPILOT MODE
			#pragma region
			switch(action){
 888:	80 91 10 01 	lds	r24, 0x0110
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	29 f0       	breq	.+10     	; 0x89a <__vector_30+0xa6>
 890:	84 30       	cpi	r24, 0x04	; 4
 892:	61 f0       	breq	.+24     	; 0x8ac <__vector_30+0xb8>
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	a9 f4       	brne	.+42     	; 0x8c2 <__vector_30+0xce>
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <__vector_30+0xb0>
				case ACTION_CHANGEMODE:
				control_mode = data;
 89a:	80 91 0f 01 	lds	r24, 0x010F
 89e:	80 93 11 01 	sts	0x0111, r24
				break;
 8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <__vector_30+0xce>
				
				case ACTION_PERFORM:
				handle_perform_action(data);
 8a4:	80 91 0f 01 	lds	r24, 0x010F
 8a8:	32 df       	rcall	.-412    	; 0x70e <handle_perform_action>
				break;
 8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <__vector_30+0xce>
				
				case ACTION_DATAREQUEST:
				handle_datarequest_action(data);
 8ac:	80 91 0f 01 	lds	r24, 0x010F
 8b0:	24 df       	rcall	.-440    	; 0x6fa <handle_datarequest_action>
				break;
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__vector_30+0xce>
			#pragma endregion
		}
	}
	else
	{
		action = UDR1;
 8b4:	80 91 9c 00 	lds	r24, 0x009C
 8b8:	80 93 10 01 	sts	0x0110, r24
		bt_react = 1;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	80 93 0e 01 	sts	0x010E, r24
	}
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0b be       	out	0x3b, r0	; 59
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <noObstacle>:



uint8_t noObstacle(uint16_t value)
{
	return (value != TRIG_ERROR && value != ECHO_ERROR) && (value < 0 || value > 200);
 8e8:	9c 01       	movw	r18, r24
 8ea:	29 5c       	subi	r18, 0xC9	; 201
 8ec:	31 09       	sbc	r19, r1
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	25 33       	cpi	r18, 0x35	; 53
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <noObstacle+0x10>
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__subsf3>:
 8fa:	50 58       	subi	r21, 0x80	; 128

000008fc <__addsf3>:
 8fc:	bb 27       	eor	r27, r27
 8fe:	aa 27       	eor	r26, r26
 900:	0e d0       	rcall	.+28     	; 0x91e <__addsf3x>
 902:	48 c1       	rjmp	.+656    	; 0xb94 <__fp_round>
 904:	39 d1       	rcall	.+626    	; 0xb78 <__fp_pscA>
 906:	30 f0       	brcs	.+12     	; 0x914 <__addsf3+0x18>
 908:	3e d1       	rcall	.+636    	; 0xb86 <__fp_pscB>
 90a:	20 f0       	brcs	.+8      	; 0x914 <__addsf3+0x18>
 90c:	31 f4       	brne	.+12     	; 0x91a <__addsf3+0x1e>
 90e:	9f 3f       	cpi	r25, 0xFF	; 255
 910:	11 f4       	brne	.+4      	; 0x916 <__addsf3+0x1a>
 912:	1e f4       	brtc	.+6      	; 0x91a <__addsf3+0x1e>
 914:	2e c1       	rjmp	.+604    	; 0xb72 <__fp_nan>
 916:	0e f4       	brtc	.+2      	; 0x91a <__addsf3+0x1e>
 918:	e0 95       	com	r30
 91a:	e7 fb       	bst	r30, 7
 91c:	24 c1       	rjmp	.+584    	; 0xb66 <__fp_inf>

0000091e <__addsf3x>:
 91e:	e9 2f       	mov	r30, r25
 920:	4a d1       	rcall	.+660    	; 0xbb6 <__fp_split3>
 922:	80 f3       	brcs	.-32     	; 0x904 <__addsf3+0x8>
 924:	ba 17       	cp	r27, r26
 926:	62 07       	cpc	r22, r18
 928:	73 07       	cpc	r23, r19
 92a:	84 07       	cpc	r24, r20
 92c:	95 07       	cpc	r25, r21
 92e:	18 f0       	brcs	.+6      	; 0x936 <__addsf3x+0x18>
 930:	71 f4       	brne	.+28     	; 0x94e <__addsf3x+0x30>
 932:	9e f5       	brtc	.+102    	; 0x99a <__addsf3x+0x7c>
 934:	62 c1       	rjmp	.+708    	; 0xbfa <__fp_zero>
 936:	0e f4       	brtc	.+2      	; 0x93a <__addsf3x+0x1c>
 938:	e0 95       	com	r30
 93a:	0b 2e       	mov	r0, r27
 93c:	ba 2f       	mov	r27, r26
 93e:	a0 2d       	mov	r26, r0
 940:	0b 01       	movw	r0, r22
 942:	b9 01       	movw	r22, r18
 944:	90 01       	movw	r18, r0
 946:	0c 01       	movw	r0, r24
 948:	ca 01       	movw	r24, r20
 94a:	a0 01       	movw	r20, r0
 94c:	11 24       	eor	r1, r1
 94e:	ff 27       	eor	r31, r31
 950:	59 1b       	sub	r21, r25
 952:	99 f0       	breq	.+38     	; 0x97a <__addsf3x+0x5c>
 954:	59 3f       	cpi	r21, 0xF9	; 249
 956:	50 f4       	brcc	.+20     	; 0x96c <__addsf3x+0x4e>
 958:	50 3e       	cpi	r21, 0xE0	; 224
 95a:	68 f1       	brcs	.+90     	; 0x9b6 <__addsf3x+0x98>
 95c:	1a 16       	cp	r1, r26
 95e:	f0 40       	sbci	r31, 0x00	; 0
 960:	a2 2f       	mov	r26, r18
 962:	23 2f       	mov	r18, r19
 964:	34 2f       	mov	r19, r20
 966:	44 27       	eor	r20, r20
 968:	58 5f       	subi	r21, 0xF8	; 248
 96a:	f3 cf       	rjmp	.-26     	; 0x952 <__addsf3x+0x34>
 96c:	46 95       	lsr	r20
 96e:	37 95       	ror	r19
 970:	27 95       	ror	r18
 972:	a7 95       	ror	r26
 974:	f0 40       	sbci	r31, 0x00	; 0
 976:	53 95       	inc	r21
 978:	c9 f7       	brne	.-14     	; 0x96c <__addsf3x+0x4e>
 97a:	7e f4       	brtc	.+30     	; 0x99a <__addsf3x+0x7c>
 97c:	1f 16       	cp	r1, r31
 97e:	ba 0b       	sbc	r27, r26
 980:	62 0b       	sbc	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	ba f0       	brmi	.+46     	; 0x9b6 <__addsf3x+0x98>
 988:	91 50       	subi	r25, 0x01	; 1
 98a:	a1 f0       	breq	.+40     	; 0x9b4 <__addsf3x+0x96>
 98c:	ff 0f       	add	r31, r31
 98e:	bb 1f       	adc	r27, r27
 990:	66 1f       	adc	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	c2 f7       	brpl	.-16     	; 0x988 <__addsf3x+0x6a>
 998:	0e c0       	rjmp	.+28     	; 0x9b6 <__addsf3x+0x98>
 99a:	ba 0f       	add	r27, r26
 99c:	62 1f       	adc	r22, r18
 99e:	73 1f       	adc	r23, r19
 9a0:	84 1f       	adc	r24, r20
 9a2:	48 f4       	brcc	.+18     	; 0x9b6 <__addsf3x+0x98>
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b7 95       	ror	r27
 9ac:	f7 95       	ror	r31
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__addsf3x+0x96>
 9b2:	b3 cf       	rjmp	.-154    	; 0x91a <__addsf3+0x1e>
 9b4:	93 95       	inc	r25
 9b6:	88 0f       	add	r24, r24
 9b8:	08 f0       	brcs	.+2      	; 0x9bc <__addsf3x+0x9e>
 9ba:	99 27       	eor	r25, r25
 9bc:	ee 0f       	add	r30, r30
 9be:	97 95       	ror	r25
 9c0:	87 95       	ror	r24
 9c2:	08 95       	ret

000009c4 <__divsf3>:
 9c4:	0c d0       	rcall	.+24     	; 0x9de <__divsf3x>
 9c6:	e6 c0       	rjmp	.+460    	; 0xb94 <__fp_round>
 9c8:	de d0       	rcall	.+444    	; 0xb86 <__fp_pscB>
 9ca:	40 f0       	brcs	.+16     	; 0x9dc <__divsf3+0x18>
 9cc:	d5 d0       	rcall	.+426    	; 0xb78 <__fp_pscA>
 9ce:	30 f0       	brcs	.+12     	; 0x9dc <__divsf3+0x18>
 9d0:	21 f4       	brne	.+8      	; 0x9da <__divsf3+0x16>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	19 f0       	breq	.+6      	; 0x9dc <__divsf3+0x18>
 9d6:	c7 c0       	rjmp	.+398    	; 0xb66 <__fp_inf>
 9d8:	51 11       	cpse	r21, r1
 9da:	10 c1       	rjmp	.+544    	; 0xbfc <__fp_szero>
 9dc:	ca c0       	rjmp	.+404    	; 0xb72 <__fp_nan>

000009de <__divsf3x>:
 9de:	eb d0       	rcall	.+470    	; 0xbb6 <__fp_split3>
 9e0:	98 f3       	brcs	.-26     	; 0x9c8 <__divsf3+0x4>

000009e2 <__divsf3_pse>:
 9e2:	99 23       	and	r25, r25
 9e4:	c9 f3       	breq	.-14     	; 0x9d8 <__divsf3+0x14>
 9e6:	55 23       	and	r21, r21
 9e8:	b1 f3       	breq	.-20     	; 0x9d6 <__divsf3+0x12>
 9ea:	95 1b       	sub	r25, r21
 9ec:	55 0b       	sbc	r21, r21
 9ee:	bb 27       	eor	r27, r27
 9f0:	aa 27       	eor	r26, r26
 9f2:	62 17       	cp	r22, r18
 9f4:	73 07       	cpc	r23, r19
 9f6:	84 07       	cpc	r24, r20
 9f8:	38 f0       	brcs	.+14     	; 0xa08 <__divsf3_pse+0x26>
 9fa:	9f 5f       	subi	r25, 0xFF	; 255
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255
 9fe:	22 0f       	add	r18, r18
 a00:	33 1f       	adc	r19, r19
 a02:	44 1f       	adc	r20, r20
 a04:	aa 1f       	adc	r26, r26
 a06:	a9 f3       	breq	.-22     	; 0x9f2 <__divsf3_pse+0x10>
 a08:	33 d0       	rcall	.+102    	; 0xa70 <__divsf3_pse+0x8e>
 a0a:	0e 2e       	mov	r0, r30
 a0c:	3a f0       	brmi	.+14     	; 0xa1c <__divsf3_pse+0x3a>
 a0e:	e0 e8       	ldi	r30, 0x80	; 128
 a10:	30 d0       	rcall	.+96     	; 0xa72 <__divsf3_pse+0x90>
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	e6 95       	lsr	r30
 a18:	00 1c       	adc	r0, r0
 a1a:	ca f7       	brpl	.-14     	; 0xa0e <__divsf3_pse+0x2c>
 a1c:	29 d0       	rcall	.+82     	; 0xa70 <__divsf3_pse+0x8e>
 a1e:	fe 2f       	mov	r31, r30
 a20:	27 d0       	rcall	.+78     	; 0xa70 <__divsf3_pse+0x8e>
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	bb 1f       	adc	r27, r27
 a2a:	26 17       	cp	r18, r22
 a2c:	37 07       	cpc	r19, r23
 a2e:	48 07       	cpc	r20, r24
 a30:	ab 07       	cpc	r26, r27
 a32:	b0 e8       	ldi	r27, 0x80	; 128
 a34:	09 f0       	breq	.+2      	; 0xa38 <__divsf3_pse+0x56>
 a36:	bb 0b       	sbc	r27, r27
 a38:	80 2d       	mov	r24, r0
 a3a:	bf 01       	movw	r22, r30
 a3c:	ff 27       	eor	r31, r31
 a3e:	93 58       	subi	r25, 0x83	; 131
 a40:	5f 4f       	sbci	r21, 0xFF	; 255
 a42:	2a f0       	brmi	.+10     	; 0xa4e <__divsf3_pse+0x6c>
 a44:	9e 3f       	cpi	r25, 0xFE	; 254
 a46:	51 05       	cpc	r21, r1
 a48:	68 f0       	brcs	.+26     	; 0xa64 <__divsf3_pse+0x82>
 a4a:	8d c0       	rjmp	.+282    	; 0xb66 <__fp_inf>
 a4c:	d7 c0       	rjmp	.+430    	; 0xbfc <__fp_szero>
 a4e:	5f 3f       	cpi	r21, 0xFF	; 255
 a50:	ec f3       	brlt	.-6      	; 0xa4c <__divsf3_pse+0x6a>
 a52:	98 3e       	cpi	r25, 0xE8	; 232
 a54:	dc f3       	brlt	.-10     	; 0xa4c <__divsf3_pse+0x6a>
 a56:	86 95       	lsr	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b7 95       	ror	r27
 a5e:	f7 95       	ror	r31
 a60:	9f 5f       	subi	r25, 0xFF	; 255
 a62:	c9 f7       	brne	.-14     	; 0xa56 <__divsf3_pse+0x74>
 a64:	88 0f       	add	r24, r24
 a66:	91 1d       	adc	r25, r1
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret
 a70:	e1 e0       	ldi	r30, 0x01	; 1
 a72:	66 0f       	add	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	bb 1f       	adc	r27, r27
 a7a:	62 17       	cp	r22, r18
 a7c:	73 07       	cpc	r23, r19
 a7e:	84 07       	cpc	r24, r20
 a80:	ba 07       	cpc	r27, r26
 a82:	20 f0       	brcs	.+8      	; 0xa8c <__divsf3_pse+0xaa>
 a84:	62 1b       	sub	r22, r18
 a86:	73 0b       	sbc	r23, r19
 a88:	84 0b       	sbc	r24, r20
 a8a:	ba 0b       	sbc	r27, r26
 a8c:	ee 1f       	adc	r30, r30
 a8e:	88 f7       	brcc	.-30     	; 0xa72 <__divsf3_pse+0x90>
 a90:	e0 95       	com	r30
 a92:	08 95       	ret

00000a94 <__fixunssfsi>:
 a94:	98 d0       	rcall	.+304    	; 0xbc6 <__fp_splitA>
 a96:	88 f0       	brcs	.+34     	; 0xaba <__fixunssfsi+0x26>
 a98:	9f 57       	subi	r25, 0x7F	; 127
 a9a:	90 f0       	brcs	.+36     	; 0xac0 <__fixunssfsi+0x2c>
 a9c:	b9 2f       	mov	r27, r25
 a9e:	99 27       	eor	r25, r25
 aa0:	b7 51       	subi	r27, 0x17	; 23
 aa2:	a0 f0       	brcs	.+40     	; 0xacc <__fixunssfsi+0x38>
 aa4:	d1 f0       	breq	.+52     	; 0xada <__fixunssfsi+0x46>
 aa6:	66 0f       	add	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	1a f0       	brmi	.+6      	; 0xab6 <__fixunssfsi+0x22>
 ab0:	ba 95       	dec	r27
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__fixunssfsi+0x12>
 ab4:	12 c0       	rjmp	.+36     	; 0xada <__fixunssfsi+0x46>
 ab6:	b1 30       	cpi	r27, 0x01	; 1
 ab8:	81 f0       	breq	.+32     	; 0xada <__fixunssfsi+0x46>
 aba:	9f d0       	rcall	.+318    	; 0xbfa <__fp_zero>
 abc:	b1 e0       	ldi	r27, 0x01	; 1
 abe:	08 95       	ret
 ac0:	9c c0       	rjmp	.+312    	; 0xbfa <__fp_zero>
 ac2:	67 2f       	mov	r22, r23
 ac4:	78 2f       	mov	r23, r24
 ac6:	88 27       	eor	r24, r24
 ac8:	b8 5f       	subi	r27, 0xF8	; 248
 aca:	39 f0       	breq	.+14     	; 0xada <__fixunssfsi+0x46>
 acc:	b9 3f       	cpi	r27, 0xF9	; 249
 ace:	cc f3       	brlt	.-14     	; 0xac2 <__fixunssfsi+0x2e>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b3 95       	inc	r27
 ad8:	d9 f7       	brne	.-10     	; 0xad0 <__fixunssfsi+0x3c>
 ada:	3e f4       	brtc	.+14     	; 0xaea <__fixunssfsi+0x56>
 adc:	90 95       	com	r25
 ade:	80 95       	com	r24
 ae0:	70 95       	com	r23
 ae2:	61 95       	neg	r22
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255
 ae6:	8f 4f       	sbci	r24, 0xFF	; 255
 ae8:	9f 4f       	sbci	r25, 0xFF	; 255
 aea:	08 95       	ret

00000aec <__floatunsisf>:
 aec:	e8 94       	clt
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__floatsisf+0x12>

00000af0 <__floatsisf>:
 af0:	97 fb       	bst	r25, 7
 af2:	3e f4       	brtc	.+14     	; 0xb02 <__floatsisf+0x12>
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	99 23       	and	r25, r25
 b04:	a9 f0       	breq	.+42     	; 0xb30 <__floatsisf+0x40>
 b06:	f9 2f       	mov	r31, r25
 b08:	96 e9       	ldi	r25, 0x96	; 150
 b0a:	bb 27       	eor	r27, r27
 b0c:	93 95       	inc	r25
 b0e:	f6 95       	lsr	r31
 b10:	87 95       	ror	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	b7 95       	ror	r27
 b18:	f1 11       	cpse	r31, r1
 b1a:	f8 cf       	rjmp	.-16     	; 0xb0c <__floatsisf+0x1c>
 b1c:	fa f4       	brpl	.+62     	; 0xb5c <__floatsisf+0x6c>
 b1e:	bb 0f       	add	r27, r27
 b20:	11 f4       	brne	.+4      	; 0xb26 <__floatsisf+0x36>
 b22:	60 ff       	sbrs	r22, 0
 b24:	1b c0       	rjmp	.+54     	; 0xb5c <__floatsisf+0x6c>
 b26:	6f 5f       	subi	r22, 0xFF	; 255
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	16 c0       	rjmp	.+44     	; 0xb5c <__floatsisf+0x6c>
 b30:	88 23       	and	r24, r24
 b32:	11 f0       	breq	.+4      	; 0xb38 <__floatsisf+0x48>
 b34:	96 e9       	ldi	r25, 0x96	; 150
 b36:	11 c0       	rjmp	.+34     	; 0xb5a <__floatsisf+0x6a>
 b38:	77 23       	and	r23, r23
 b3a:	21 f0       	breq	.+8      	; 0xb44 <__floatsisf+0x54>
 b3c:	9e e8       	ldi	r25, 0x8E	; 142
 b3e:	87 2f       	mov	r24, r23
 b40:	76 2f       	mov	r23, r22
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <__floatsisf+0x5e>
 b44:	66 23       	and	r22, r22
 b46:	71 f0       	breq	.+28     	; 0xb64 <__floatsisf+0x74>
 b48:	96 e8       	ldi	r25, 0x86	; 134
 b4a:	86 2f       	mov	r24, r22
 b4c:	70 e0       	ldi	r23, 0x00	; 0
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	2a f0       	brmi	.+10     	; 0xb5c <__floatsisf+0x6c>
 b52:	9a 95       	dec	r25
 b54:	66 0f       	add	r22, r22
 b56:	77 1f       	adc	r23, r23
 b58:	88 1f       	adc	r24, r24
 b5a:	da f7       	brpl	.-10     	; 0xb52 <__floatsisf+0x62>
 b5c:	88 0f       	add	r24, r24
 b5e:	96 95       	lsr	r25
 b60:	87 95       	ror	r24
 b62:	97 f9       	bld	r25, 7
 b64:	08 95       	ret

00000b66 <__fp_inf>:
 b66:	97 f9       	bld	r25, 7
 b68:	9f 67       	ori	r25, 0x7F	; 127
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	08 95       	ret

00000b72 <__fp_nan>:
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	80 ec       	ldi	r24, 0xC0	; 192
 b76:	08 95       	ret

00000b78 <__fp_pscA>:
 b78:	00 24       	eor	r0, r0
 b7a:	0a 94       	dec	r0
 b7c:	16 16       	cp	r1, r22
 b7e:	17 06       	cpc	r1, r23
 b80:	18 06       	cpc	r1, r24
 b82:	09 06       	cpc	r0, r25
 b84:	08 95       	ret

00000b86 <__fp_pscB>:
 b86:	00 24       	eor	r0, r0
 b88:	0a 94       	dec	r0
 b8a:	12 16       	cp	r1, r18
 b8c:	13 06       	cpc	r1, r19
 b8e:	14 06       	cpc	r1, r20
 b90:	05 06       	cpc	r0, r21
 b92:	08 95       	ret

00000b94 <__fp_round>:
 b94:	09 2e       	mov	r0, r25
 b96:	03 94       	inc	r0
 b98:	00 0c       	add	r0, r0
 b9a:	11 f4       	brne	.+4      	; 0xba0 <__fp_round+0xc>
 b9c:	88 23       	and	r24, r24
 b9e:	52 f0       	brmi	.+20     	; 0xbb4 <__fp_round+0x20>
 ba0:	bb 0f       	add	r27, r27
 ba2:	40 f4       	brcc	.+16     	; 0xbb4 <__fp_round+0x20>
 ba4:	bf 2b       	or	r27, r31
 ba6:	11 f4       	brne	.+4      	; 0xbac <__fp_round+0x18>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__fp_round+0x20>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__fp_split3>:
 bb6:	57 fd       	sbrc	r21, 7
 bb8:	90 58       	subi	r25, 0x80	; 128
 bba:	44 0f       	add	r20, r20
 bbc:	55 1f       	adc	r21, r21
 bbe:	59 f0       	breq	.+22     	; 0xbd6 <__fp_splitA+0x10>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	71 f0       	breq	.+28     	; 0xbe0 <__fp_splitA+0x1a>
 bc4:	47 95       	ror	r20

00000bc6 <__fp_splitA>:
 bc6:	88 0f       	add	r24, r24
 bc8:	97 fb       	bst	r25, 7
 bca:	99 1f       	adc	r25, r25
 bcc:	61 f0       	breq	.+24     	; 0xbe6 <__fp_splitA+0x20>
 bce:	9f 3f       	cpi	r25, 0xFF	; 255
 bd0:	79 f0       	breq	.+30     	; 0xbf0 <__fp_splitA+0x2a>
 bd2:	87 95       	ror	r24
 bd4:	08 95       	ret
 bd6:	12 16       	cp	r1, r18
 bd8:	13 06       	cpc	r1, r19
 bda:	14 06       	cpc	r1, r20
 bdc:	55 1f       	adc	r21, r21
 bde:	f2 cf       	rjmp	.-28     	; 0xbc4 <__fp_split3+0xe>
 be0:	46 95       	lsr	r20
 be2:	f1 df       	rcall	.-30     	; 0xbc6 <__fp_splitA>
 be4:	08 c0       	rjmp	.+16     	; 0xbf6 <__fp_splitA+0x30>
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	99 1f       	adc	r25, r25
 bee:	f1 cf       	rjmp	.-30     	; 0xbd2 <__fp_splitA+0xc>
 bf0:	86 95       	lsr	r24
 bf2:	71 05       	cpc	r23, r1
 bf4:	61 05       	cpc	r22, r1
 bf6:	08 94       	sec
 bf8:	08 95       	ret

00000bfa <__fp_zero>:
 bfa:	e8 94       	clt

00000bfc <__fp_szero>:
 bfc:	bb 27       	eor	r27, r27
 bfe:	66 27       	eor	r22, r22
 c00:	77 27       	eor	r23, r23
 c02:	cb 01       	movw	r24, r22
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__mulsf3>:
 c08:	0b d0       	rcall	.+22     	; 0xc20 <__mulsf3x>
 c0a:	c4 cf       	rjmp	.-120    	; 0xb94 <__fp_round>
 c0c:	b5 df       	rcall	.-150    	; 0xb78 <__fp_pscA>
 c0e:	28 f0       	brcs	.+10     	; 0xc1a <__mulsf3+0x12>
 c10:	ba df       	rcall	.-140    	; 0xb86 <__fp_pscB>
 c12:	18 f0       	brcs	.+6      	; 0xc1a <__mulsf3+0x12>
 c14:	95 23       	and	r25, r21
 c16:	09 f0       	breq	.+2      	; 0xc1a <__mulsf3+0x12>
 c18:	a6 cf       	rjmp	.-180    	; 0xb66 <__fp_inf>
 c1a:	ab cf       	rjmp	.-170    	; 0xb72 <__fp_nan>
 c1c:	11 24       	eor	r1, r1
 c1e:	ee cf       	rjmp	.-36     	; 0xbfc <__fp_szero>

00000c20 <__mulsf3x>:
 c20:	ca df       	rcall	.-108    	; 0xbb6 <__fp_split3>
 c22:	a0 f3       	brcs	.-24     	; 0xc0c <__mulsf3+0x4>

00000c24 <__mulsf3_pse>:
 c24:	95 9f       	mul	r25, r21
 c26:	d1 f3       	breq	.-12     	; 0xc1c <__mulsf3+0x14>
 c28:	95 0f       	add	r25, r21
 c2a:	50 e0       	ldi	r21, 0x00	; 0
 c2c:	55 1f       	adc	r21, r21
 c2e:	62 9f       	mul	r22, r18
 c30:	f0 01       	movw	r30, r0
 c32:	72 9f       	mul	r23, r18
 c34:	bb 27       	eor	r27, r27
 c36:	f0 0d       	add	r31, r0
 c38:	b1 1d       	adc	r27, r1
 c3a:	63 9f       	mul	r22, r19
 c3c:	aa 27       	eor	r26, r26
 c3e:	f0 0d       	add	r31, r0
 c40:	b1 1d       	adc	r27, r1
 c42:	aa 1f       	adc	r26, r26
 c44:	64 9f       	mul	r22, r20
 c46:	66 27       	eor	r22, r22
 c48:	b0 0d       	add	r27, r0
 c4a:	a1 1d       	adc	r26, r1
 c4c:	66 1f       	adc	r22, r22
 c4e:	82 9f       	mul	r24, r18
 c50:	22 27       	eor	r18, r18
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	62 1f       	adc	r22, r18
 c58:	73 9f       	mul	r23, r19
 c5a:	b0 0d       	add	r27, r0
 c5c:	a1 1d       	adc	r26, r1
 c5e:	62 1f       	adc	r22, r18
 c60:	83 9f       	mul	r24, r19
 c62:	a0 0d       	add	r26, r0
 c64:	61 1d       	adc	r22, r1
 c66:	22 1f       	adc	r18, r18
 c68:	74 9f       	mul	r23, r20
 c6a:	33 27       	eor	r19, r19
 c6c:	a0 0d       	add	r26, r0
 c6e:	61 1d       	adc	r22, r1
 c70:	23 1f       	adc	r18, r19
 c72:	84 9f       	mul	r24, r20
 c74:	60 0d       	add	r22, r0
 c76:	21 1d       	adc	r18, r1
 c78:	82 2f       	mov	r24, r18
 c7a:	76 2f       	mov	r23, r22
 c7c:	6a 2f       	mov	r22, r26
 c7e:	11 24       	eor	r1, r1
 c80:	9f 57       	subi	r25, 0x7F	; 127
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	8a f0       	brmi	.+34     	; 0xca8 <__mulsf3_pse+0x84>
 c86:	e1 f0       	breq	.+56     	; 0xcc0 <__mulsf3_pse+0x9c>
 c88:	88 23       	and	r24, r24
 c8a:	4a f0       	brmi	.+18     	; 0xc9e <__mulsf3_pse+0x7a>
 c8c:	ee 0f       	add	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	bb 1f       	adc	r27, r27
 c92:	66 1f       	adc	r22, r22
 c94:	77 1f       	adc	r23, r23
 c96:	88 1f       	adc	r24, r24
 c98:	91 50       	subi	r25, 0x01	; 1
 c9a:	50 40       	sbci	r21, 0x00	; 0
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__mulsf3_pse+0x64>
 c9e:	9e 3f       	cpi	r25, 0xFE	; 254
 ca0:	51 05       	cpc	r21, r1
 ca2:	70 f0       	brcs	.+28     	; 0xcc0 <__mulsf3_pse+0x9c>
 ca4:	60 cf       	rjmp	.-320    	; 0xb66 <__fp_inf>
 ca6:	aa cf       	rjmp	.-172    	; 0xbfc <__fp_szero>
 ca8:	5f 3f       	cpi	r21, 0xFF	; 255
 caa:	ec f3       	brlt	.-6      	; 0xca6 <__mulsf3_pse+0x82>
 cac:	98 3e       	cpi	r25, 0xE8	; 232
 cae:	dc f3       	brlt	.-10     	; 0xca6 <__mulsf3_pse+0x82>
 cb0:	86 95       	lsr	r24
 cb2:	77 95       	ror	r23
 cb4:	67 95       	ror	r22
 cb6:	b7 95       	ror	r27
 cb8:	f7 95       	ror	r31
 cba:	e7 95       	ror	r30
 cbc:	9f 5f       	subi	r25, 0xFF	; 255
 cbe:	c1 f7       	brne	.-16     	; 0xcb0 <__mulsf3_pse+0x8c>
 cc0:	fe 2b       	or	r31, r30
 cc2:	88 0f       	add	r24, r24
 cc4:	91 1d       	adc	r25, r1
 cc6:	96 95       	lsr	r25
 cc8:	87 95       	ror	r24
 cca:	97 f9       	bld	r25, 7
 ccc:	08 95       	ret

00000cce <__udivmodsi4>:
 cce:	a1 e2       	ldi	r26, 0x21	; 33
 cd0:	1a 2e       	mov	r1, r26
 cd2:	aa 1b       	sub	r26, r26
 cd4:	bb 1b       	sub	r27, r27
 cd6:	fd 01       	movw	r30, r26
 cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <__udivmodsi4_ep>

00000cda <__udivmodsi4_loop>:
 cda:	aa 1f       	adc	r26, r26
 cdc:	bb 1f       	adc	r27, r27
 cde:	ee 1f       	adc	r30, r30
 ce0:	ff 1f       	adc	r31, r31
 ce2:	a2 17       	cp	r26, r18
 ce4:	b3 07       	cpc	r27, r19
 ce6:	e4 07       	cpc	r30, r20
 ce8:	f5 07       	cpc	r31, r21
 cea:	20 f0       	brcs	.+8      	; 0xcf4 <__udivmodsi4_ep>
 cec:	a2 1b       	sub	r26, r18
 cee:	b3 0b       	sbc	r27, r19
 cf0:	e4 0b       	sbc	r30, r20
 cf2:	f5 0b       	sbc	r31, r21

00000cf4 <__udivmodsi4_ep>:
 cf4:	66 1f       	adc	r22, r22
 cf6:	77 1f       	adc	r23, r23
 cf8:	88 1f       	adc	r24, r24
 cfa:	99 1f       	adc	r25, r25
 cfc:	1a 94       	dec	r1
 cfe:	69 f7       	brne	.-38     	; 0xcda <__udivmodsi4_loop>
 d00:	60 95       	com	r22
 d02:	70 95       	com	r23
 d04:	80 95       	com	r24
 d06:	90 95       	com	r25
 d08:	9b 01       	movw	r18, r22
 d0a:	ac 01       	movw	r20, r24
 d0c:	bd 01       	movw	r22, r26
 d0e:	cf 01       	movw	r24, r30
 d10:	08 95       	ret

00000d12 <__tablejump2__>:
 d12:	ee 0f       	add	r30, r30
 d14:	ff 1f       	adc	r31, r31
 d16:	00 24       	eor	r0, r0
 d18:	00 1c       	adc	r0, r0
 d1a:	0b be       	out	0x3b, r0	; 59
 d1c:	07 90       	elpm	r0, Z+
 d1e:	f6 91       	elpm	r31, Z
 d20:	e0 2d       	mov	r30, r0
 d22:	09 94       	ijmp

00000d24 <__muluhisi3>:
 d24:	09 d0       	rcall	.+18     	; 0xd38 <__umulhisi3>
 d26:	a5 9f       	mul	r26, r21
 d28:	90 0d       	add	r25, r0
 d2a:	b4 9f       	mul	r27, r20
 d2c:	90 0d       	add	r25, r0
 d2e:	a4 9f       	mul	r26, r20
 d30:	80 0d       	add	r24, r0
 d32:	91 1d       	adc	r25, r1
 d34:	11 24       	eor	r1, r1
 d36:	08 95       	ret

00000d38 <__umulhisi3>:
 d38:	a2 9f       	mul	r26, r18
 d3a:	b0 01       	movw	r22, r0
 d3c:	b3 9f       	mul	r27, r19
 d3e:	c0 01       	movw	r24, r0
 d40:	a3 9f       	mul	r26, r19
 d42:	70 0d       	add	r23, r0
 d44:	81 1d       	adc	r24, r1
 d46:	11 24       	eor	r1, r1
 d48:	91 1d       	adc	r25, r1
 d4a:	b2 9f       	mul	r27, r18
 d4c:	70 0d       	add	r23, r0
 d4e:	81 1d       	adc	r24, r1
 d50:	11 24       	eor	r1, r1
 d52:	91 1d       	adc	r25, r1
 d54:	08 95       	ret

00000d56 <_exit>:
 d56:	f8 94       	cli

00000d58 <__stop_program>:
 d58:	ff cf       	rjmp	.-2      	; 0xd58 <__stop_program>
